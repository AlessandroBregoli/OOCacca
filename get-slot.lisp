
(defun methodp (value)
	(and (listp value) (> (length value) 2) (eq 'method (first value)))
)
(defun def_method (lista)
	(list 'lambda (second lista) (prognizza (rest (rest lista))))
)
(defun prognizza (operazioni)
	(cons 'progn operazioni)
)

(defun set-slot (classe campo valore)
	(let ((tabella 
		(if (methodp valore) 
			(cdr classe) 
			(car classe)
		)
	     ))
	     (progn
		(if (not (has_member tabella campo))
			(setf (gethash '__names__ tabella) 
			      (cons campo (gethash '__names__ tabella))
			)
		)
		;in ogni caso:
		(setf (gethash campo tabella) valore)
		;se Ã¨ un metodo serve esportare la funzione
		(if (methodp valore)
			(eval (list 'defun campo '(this &rest args)
				(list 'apply (def_method valore) 'args))
			)
		)
	     )
	)
)
(defun get-slot (istanza nome) 
	(gethash nome (car istanza))
)
